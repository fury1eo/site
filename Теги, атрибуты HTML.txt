Теги, атрибуты HTML

<!DOCTYPE> <html> <head> <body>

h1 - заголовок первого уровня (header 1)
p - абзац (paragraph)

тег переноса строки <br> или горизонтальной линии <hr>
<em> курсив </em>

тег <a> — ссылка href - для адреса
<article> </article>

Картинка:
<figure>
<img
  src="http://example.com/cat.jpg"
  title="Мурка"
  alt="Рыжая кошка валяется в снегу"
  width="640"
  height="480"
>
<figcaption>
</figure>

src - ссылка на картинку?
alt - текст, который отображается вместо картинки, если она не загрузилась
title - текст, который отображается при наведении мыши на картинку
width - ширина картинки в пикселях
height - высота картинки в пикселях

абзацы <р>
списки: маркированные (с маркером) <ul> и нумерованные (с числами) <ol>
заголовки: от первого уровня <h1> до шестого уровня <h6>
статьи <article>
разделы <section>
длинные цитаты <blockquote>
блоки общего назначения  <div>

<ul> (unordered list) - тег начала и конца списка
<li> (list item) - пункт списка
<ol> (ordered list) - тег начала и конца списка
<li> (list item) - пункт списка
<dl> (description list) - тег начала и конца списка
<dt> (term) - термин
<dd> (description) - определение

Таблицы в HTML создаются при помощи тега <table>.

Внутри него размещают строки таблицы <tr> (table row)

Внутри строк помещают ячейки строки <td> (table data).

Тегом <th> (table header) размечаются заголовочные ячейки. Он отличается от <td> тем, что его содержимое будет выделено полужирным и выровнено по центру.
<table border="1"> ... </table> 
<thead> - для заголовка,
<tfoot> - нижний колонтитул таблицы,
<tbody> - основной контент таблицы
<caption>
<td colspan="3">Единственная ячейка</td>
<td rowspan="2">Левая ячейка</td>

Типы полей форм:
<input type="text">
<input type="password">
<input type="checkbox">

<input type="radio" name="gender" value="male" checked> Мужской<br>
<input type="radio" name="gender" value="female"> Женский<br>
<input type="radio" name="gender" value="other"> Другой

<input type="file">
<input type="reset">
<input type="submit">
<button>Нажми на меня</button>

тег <select>. У него есть несколько атрибутов: name, size, multiple.
Каждый элемент списка выделяется в тег <option>. Так же, как и с <input type="checkbox"> и <input type="radio"> нужно указывать атрибут value со значением, которое будет отправлено на сервер.

type="email"
type="tel"
type="url"
type="number" Атрибуты min и max определяют нижнее и верхнее возможное значение, step - шаг изменения, a value - начальное значение.
type="range". Появляются уже указанные атрибуты min, max, step и ?value.
type="search"

В head HTML-документа нужно добавить link со ссылкой на файл .css:
<link rel="stylesheet" href="style.css">

В head HTML-документа нужно добавить тэг “style”:

<style>
 .example {
  background: #ebac0c;
 }
</style>

Чтобы стилизовать конкретный элемент, можно использовать атрибут “style”:

<div style="border: 1px solid #000; margin-top: 16px;">Див со стилем</div>
Синтаксис внутри атрибута совпадает с синтаксисом внутри фигурных скобок в селекторе CSS.

Селектор это правило, по которому будут выбраны элементы — например, мы можем обратиться ко всем параграфам или картинкам. Как?

p {} img {}

Самый простой селектор - выбирает элементы по их тегу:

h1 {
   /* стили для всех h1 */
}

Самый часто используемый селектор — по классу. Задаём в HTML класс элементам, к которым применить стиль:

<div class="card">
 Карточка
</div>
И теперь эти элементы можно выбрать по имени класса. Имя селектора начинается с точки:

.card {
   /* стили для всех элементов с class="card" */
   background: #333; /* фон серого цвета */
}

Задавать стили по id - дурной тон, старайся его избегать. Тут всё тоже самое, что и с классом, только атрибут называется id:

<button id="button-go-to-top">
 Наверх
</button>
И имя селектора начинается с решётки:

#button-go-to-top {
   /* стили для элемента с id="button-go-to-top" */
   text-decoration: underline; /* подчёркивание текста */
}

Не самый популярный селектор, но иногда он полезен:

<button data-my-custom-attribute="my-custom-value">
 Нажми на меня
</button>
 Имя и значение атрибута пишется в квадратных скобках. Работает с любым атрибутом:

[data-my-custom-attribute="my-custom-value"] {
   color: red;
}

Один и тот же набор свойств можно применить к разным селекторам. Пример:

button,
.button,
.cta-button {}

Нужно просто указать  через запятую все селекторы, к которым ты хочешь применить стили.

Можно стилизовать конкретный элемент, если у него есть определённый класс. Примеры:

p.example {}
Селектор выберет все p, у которых есть класс example.
.main.active {}

Если между двумя простыми селекторами стоит пробел и ничего больше, это означает вложенность на любом уровне. Пример:

.page p {
 text-decoration: underline;
}
Этот селектор применит подчёркиваение ко всем <p>, которые находятся внутри элемента с классом page на любом уровне вложенности.


Правая угловая скобка > обозначает вложенность на первом уровне. Пример:

.page > p {
 text-decoration: underline;
}
Этот селектор применится ко всем <p>, которые находятся внутри элемента с классом page на первом уровне вложенности

Можно задавать стили в зависимости от конкретного значения конретного ﻿атрибута﻿﻿. Пример:
input[type="password"] {}
Этот селектор выберет все элементы <input type="password">

Для того, чтобы выбрать элемент, который находится сразу после другого элемента, используется знак +. Пример:

img + p {
 margin-top: 0;
 font-style: italic;
}
Этот код применит стили во всех <p>, идущих сразу после <img>:

Для того, чтобы выбрать элемент, который находится после другого элемента, используется знак ~. Пример:

img ~ p {
 margin-top: 0;
 font-style: italic;
}
Этот код применит стили во всех <p>, идущих после <img>, даже если между img и p есть другие элементы:

Фон:

.example {
   /* цвет фона «продающий красный», задан в HEX-формате */
   background: #e64c0c;
}

.example {
   /* картинка на фоне */
   background: url('images/nude-president.png'); 

   /* background-size отвечает за размер картинки, cover - картинка растягивается на весь блок, сохраняя пропорции */
   background-size: cover;
}


Самые часто используемые псевдоклассы:
:hover - появляется при наведении мышки
:active - появляется при нажатии на элемент
:focus - появляется при фокусировке на элементе (например, когда выбрано поле ввода текста)

Вот так выглядит анимирование переходов в коде:

button {
    border-radius: 4px;
    transition: border-radius 0.5s ease-in;
}

button:hover {
    border-radius: 16px;
}


Синтаксис медиа-запроса выглядит так:

@media правило {
   /* ﻿обычный CSS-код, который применится при соблюдении правила */
}

Пример медиа-запроса:
media screen and (max-width: 320px) {
    img {
        width: 100%;
    }
}